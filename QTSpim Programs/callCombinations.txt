.data


n: .word 4 # n argument for number of elements
k: .word 3 # k argument for the size of a combination	


msg1:   	.asciiz "n:"
msg2:   	.asciiz "k:"
msg3:   	.asciiz "Combinations without repetitions:"
nLine: 	.asciiz "\n"		

.text
.globl main

main:

lw $a0, n
lw $a1, k

jal comb
# move the result into a2
add $a2, $v0, $zero
lw $a0, n
lw $a1, k
jal comb_printing


ori $v0, $zero, 10        	#exit
syscall



comb_printing:	
	add		$t0, $zero, $a0
	li $v0, 4
	la $a0, msg1     # argument: string
	syscall         # print the string

	la $a0, nLine	# argument: new line string
	syscall         # print the string

	# Print integer
	li $v0, 1
	add $a0, $t0, $zero  #n
	syscall

	li $v0, 4
	la $a0, nLine	# argument: new line string
	syscall         # print the string


	la $a0, msg2     # argument: string
	syscall         # print the string

	la $a0, nLine	# argument: new line string
	syscall         # print the string

	# Print integer
	li $v0, 1
	add $a0, $a1, $zero  #k
	syscall

	li $v0, 4
	la $a0, nLine	# argument: new line string
	syscall         # print the string

	la $a0, msg3     # argument: string
	syscall         # print the string

	la $a0, nLine	# argument: new line string
	syscall         # print the string

	# Print integer
	li $v0, 1
	add $a0, $a2, $zero
	syscall

	la $a0, nLine	# argument: new line string
	li $v0, 4
	syscall         # print the string

	jr $ra

comb:           
 sub $sp, $sp, 16
 sw $ra , 0($sp)
 sw $s0, 4($sp)  #save registers used inside must be saved
 sw $a0, 8($sp)  #because fact will ruin a0
 sw $a1, 12($sp) #because we will need it for another call
 jal fact       
 move $s0, $v0  
 lw $a0, 12($sp) # get k
 jal fact       
 div $s0, $s0, $v0 # n!/k!
 lw $a0, 8($sp)  
 lw $a1, 12($sp) 
 sub $a0, $a0, $a1  # n-k
 jal fact       
 div $s0, $s0, $v0 # n!/(k!(n-k)!)
 move $v0, $s0  
 lw  $ra, 0($sp) 
 lw  $s0, 4($sp) 
 lw  $a0, 8($sp) 
 lw  $a1, 12($sp) 
 addi $sp, $sp, 16 
 jr $ra         

fact:
#The first time fact is called, sw saves an address in the program that called it
	addi $sp, $sp, -8 # adjust stack for 2 items
	sw $ra, 4($sp) # save the return address
	sw $a0, 0($sp) # save the argument n
	slti $t0,$a0,1 # test for n < 1
	beq $t0,$zero,L1 # if n >= 1, go to L1
# n LESS THAN 1  ------> every n will reach this point
	addi $v0,$zero,1 # return 1
	addi $sp,$sp,8 # pop 2 items off stack
	jr $ra # return to caller

L1: 	addi $a0, $a0, -1 # n >= 1: argument gets (n – 1)
	jal fact # call fact with (n –1)
	lw $a0, 0($sp) # return from jal: restore argument n
	lw $ra, 4($sp) # restore the return address
	addi $sp, $sp, 8 # adjust stack pointer to pop 2 items
# We assume a multiply instruction is available, even though it is not covered until Ch 3
	mul $v0,$a0,$v0 # return n * fact (n – 1)
#fact jumps again to the return address:
	jr $ra # return to the caller


fact_printing:	
	add		$t0, $zero, $a0
	li $v0, 4
	la $a0, msg     # argument: string
	syscall         # print the string

	la $a0, nLine	# argument: new line string
	syscall         # print the string

	# Print integer
	li $v0, 1
	add $a0, $t0, $zero
	syscall

	la $a0, nLine	# argument: new line string
	li $v0, 4
	syscall         # print the string

	jr $ra