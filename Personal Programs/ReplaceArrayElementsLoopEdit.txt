.data

A: .word 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
i: .word 7
B: .word 40 45 50 55 60 65
k: .word 2
f: .word 15					# length of A
g: .word 6					# length of B

.text
.globl main

main:

# load registers for array A

la	$s0, A					# load address of A
lw	$s2, i					# load word i into s2
lw	$s4, f					# load word f into s4

# load registers for array B
la	$s1, B					# load address of B
lw	$s3, k					# load word k into s3
lw	$s5, g					# load word g into s5


							# initialize counters to get A[i]
	sll $s6, $s2, 2			#multiply s2 by 4	
	add $s6, $s6, $s0		# address of A[i]

							# initialize counters to get B[k]
	sll $s7, $s3, 2			
	add $s7, $s7, $s1		# address of B

Loop:

							#Loop through A
	slt $t0, $s2, $s4 		# $t0 <-1 if (startA < sizeA), $t0 <-0 if (startA >= sizeA) 
	beq $t0, $zero, end 
							#loop through B
	slt $t0, $s3, $s5 		# $t0 <-1 if (startB < sizeB), $t0 <-0 if (startB >= sizeB) 
	beq $t0, $zero, end 


							# load A[i] and store into B[k]
	lw $t0, 0($s6)
	
	addi $t1, $zero, 2		#store divisor in $t1
	div $t0, $t0, $t1		#Divide $t0 by 2
	mfhi $s8			`	#Remainder
	
	beq $t2, $s8, 2			#if remainder == 2 make t2 = 1
	srl $t5, $t0, 1			#add 1
	
	beq $t3, $s8, 1			#if remainder == 1 make t3 equal 1
	sll $t5, $t5, 1			#subtract 1
	sw $t0, 0($s7)			#update of the indices
	#remember t0 was set to t5 after adding 1 to t0 in line 53
	sub $t5, $t0, $t5		#t0 = something random/null as it was set to t5
							#t5 = (t5+1) - 1 OR initial t0 value before swap
							#t0-t5 is remainder
	
	addi $s3, $s3, 1 		# startB++ 
	addi $s2, $s2, 1 		# startA++ 

							#update the address	
	addi $s7, $s7, 4 		# addr(B[startB]) +=4 
	addi $s6, $s6, 4 		# addr(A[startA]) +=4 
	j Loop

end:
ori $v0, $zero, 10        	#exit
syscall



