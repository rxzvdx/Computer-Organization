.data


n: .word 0 				# n argument for fact(n)


msg: .asciiz "fact result:"
nLine: .asciiz "\n"

main:

lw $a0, n
jal fact
# move the result into v0
add $a0, $v0, $zero
jal fact_printing


ori $v0, $zero, 10	#exit
syscall

fact:
#The first time fact is called, sw saves an address in the program that called it
	addi $sp, $sp, -8 	#adjust stack for 2 items
	sw $ra, 4($sp) 		#save the return address 
	sw $a0, 0($p) 		#save the argument n
	slti $t0, $a0, 1 	#test for n < 1
	beq $t0, $zero, L1 	#if n >=1, go to L1
# n LESS THAN 1 ----> every n will reach this point
	addi $v0, $zero, 1 	#returns 1
	addi $sp, $sp, 8 	# pop 2 items off stack
	jr $ra #return to caller
	
L1:	addi $a0, $a0, -1 	# n >=1: argument gets (n-1)
	jal fact # call fact with (n-1)
	lw $a0, 0($sp) 		# return from jal: restore argument n
	lw $ra, 4($sp) 		# restore the return address
	addi $sp, $sp, 8 	# adjust stack pointer to pop 2 items
# We assume a multiply instruction is available, even though it is not covered until ch. 3
	mul $v0, $a0, $v0 	# return  * fact (n-1)
#fact jumps again to the return address
	jr $ra 				# return to the caller
	
fact_printing:
	add $t0, $zero, $a0 
	li $v0, 4
	la $a0, msg 		# argument: String
	syscall 			# print the string

	la $a0, nLine 		# argument: new line String
	syscall 			# print the string

	# Print integer
	li $v0, 1
	add $a0, $t0, $zero
	syscall

	la $a0, nLine 		# argument: new line String
	li $v0, 4
	syscall				# print the String
	jr $ra